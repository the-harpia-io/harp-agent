zabbix_export:
  version: '5.4'
  date: '2021-10-16T08:31:00Z'
  media_types:
    -
      name: Harp
      type: WEBHOOK
      parameters:
        -
          name: harp_endpoint
          value: '<URL Generated in Harp Integrations>'
        -
          name: alert_message
          value: '{ALERT.MESSAGE}'
        -
          name: eventack
          value: '{EVENT.ACK.STATUS}'
        -
          name: eventdate
          value: '{EVENT.DATE}'
        -
          name: eventid
          value: '{EVENT.ID}'
        -
          name: eventname
          value: '{ALERT.SUBJECT}'
        -
          name: eventtags
          value: '{EVENT.TAGS}'
        -
          name: eventtime
          value: '{EVENT.TIME}'
        -
          name: eventupdate
          value: '{EVENT.UPDATE.STATUS}'
        -
          name: eventvalue
          value: '{EVENT.VALUE}'
        -
          name: event_source
          value: '{EVENT.SOURCE}'
        -
          name: hostip
          value: '{HOST.IP}'
        -
          name: host_name
          value: '{HOST.NAME}'
        -
          name: severity
          value: '{EVENT.NSEVERITY}'
        -
          name: token
          value: '<put your key>'
        -
          name: triggerdesc
          value: '{TRIGGER.DESCRIPTION}'
        -
          name: triggerid
          value: '{TRIGGER.ID}'
        -
          name: triggeropdata
          value: '{EVENT.OPDATA}'
        -
          name: url
          value: '{$ZABBIX.URL}'
      script: |
        try {

            var params = JSON.parse(value),
                req = new HttpRequest(),
                fields = {},
                resp = '';

            if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {
                req.setProxy(params.HTTPProxy);
            }

            req.addHeader('Content-Type: application/json');

            if (((params.eventvalue == 1) && (params.eventupdate == 0)) || params.event_source !== '0') {
                fields.event_action = 'trigger';
                fields.payload = {
                    summary: params.eventname,
                    source: (params.event_source === '1') ? 'Discovery' : params.hostname + ' : ' + params.hostip,
                    severity: severityMapping[params.severity],
                };

                if (params.event_source === '0') {
                    fields.payload.custom_details = {
                        'Event date': params.eventdate,
                        'Event time': params.eventtime,
                        'Trigger description': params.triggerdesc,
                        'Trigger opdata': params.triggeropdata,
                        'Event tags': params.eventtags,
                        'Event host': params.hostname,
                        'Event host ip': params.hostip
                    };
                    fields.links = [{
                        href: params.url + '/tr_events.php?triggerid=' + params.triggerid + '&eventid=' + params.eventid,
                        text: 'Event link'
                    }];
                }
                else {
                    fields.payload.custom_details = {
                        'Alert message': params.alert_message
                    };
                }

                fields.client = 'Zabbix';
                fields.client_url = params.url;
            }
            else if ((params.eventvalue == 1) && (params.eventupdate == 1) && (params.eventack == 'Yes'))
                fields.event_action = 'acknowledge';
            else if (params.eventvalue == 0)
                fields.event_action = 'resolve';
            else
                throw 'incorrect values. Update message without ack will not be sent.';

            Zabbix.log(4, '[Harp Webhook] Sending request:' + JSON.stringify(fields));
            resp = req.post(params.harp_endpoint,
                JSON.stringify(fields)
            );
            Zabbix.log(4, '[Harp Webhook] Receiving response:' + resp);

            try {
                resp = JSON.parse(resp);
            }
            catch (error) {
                throw 'incorrect response. Harp returned a non-JSON object.';
            }

            if (req.getStatus() != 202) {
                if (typeof resp === 'object' && typeof resp.errors === 'object' && typeof resp.errors[0] === 'string') {
                    throw resp.errors[0];
                }
                else {
                    throw 'Unknown error.';
                }
            }

            if (resp.status != 'success') {
                throw 'Unknown error.';
            }

            return 'OK';
        }
        catch (error) {
            Zabbix.log(3, '[Harp Webhook] Notification failed : ' + error);
            throw 'Harp notification failed : ' + error;
        }
      description: |
        Please refer to https://harpia.io/integration/zabbix/

        Set global macro {$ZABBIX.URL} with your Zabbix server URL.
        Add a dedicated user with the media type "Haro" and place the integration key in the "token" parameter to integrate into the service.
      message_templates:
        -
          event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: 'Problem: {EVENT.NAME}'
          message: |
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Problem name: {EVENT.NAME}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Operational data: {EVENT.OPDATA}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        -
          event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: 'Resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        -
          event_source: TRIGGERS
          operation_mode: UPDATE
          subject: 'Updated problem in {EVENT.AGE}: {EVENT.NAME}'
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            {EVENT.UPDATE.MESSAGE}

            Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.
        -
          event_source: DISCOVERY
          operation_mode: PROBLEM
          subject: 'Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}'
          message: |
            Discovery rule: {DISCOVERY.RULE.NAME}

            Device IP: {DISCOVERY.DEVICE.IPADDRESS}
            Device DNS: {DISCOVERY.DEVICE.DNS}
            Device status: {DISCOVERY.DEVICE.STATUS}
            Device uptime: {DISCOVERY.DEVICE.UPTIME}

            Device service name: {DISCOVERY.SERVICE.NAME}
            Device service port: {DISCOVERY.SERVICE.PORT}
            Device service status: {DISCOVERY.SERVICE.STATUS}
            Device service uptime: {DISCOVERY.SERVICE.UPTIME}
        -
          event_source: AUTOREGISTRATION
          operation_mode: PROBLEM
          subject: 'Autoregistration: {HOST.HOST}'
          message: |
            Host name: {HOST.HOST}
            Host IP: {HOST.IP}
            Agent port: {HOST.PORT}